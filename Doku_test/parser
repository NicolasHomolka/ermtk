import argparse

vers = 'ermtk 0.0.0.1'

# create the top-level parser for the base command
ermtk_parser = argparse.ArgumentParser(prog='ermtk')
ermtk_parser.add_argument('-v', '--version', action='version', version=vers)
ermtk_subparsers = ermtk_parser.add_subparsers(title='sub-commands', help='sub-command help', dest='subparser')

# create the parser for the "erd" sub-command

parser_erdgenerate = ermtk_subparsers.add_parser('erdgenerate', help='Generate an ERD from XERML Modell')
parser_erdgenerate.add_argument('-i', '--inputfile', help='Inputfile')
parser_erdgenerate.add_argument('-o', '--output', help='Outputfile')
parser_erdgenerate.add_argument('-n', '--notation', help='Takes a value to define the notation \n'
                                                         'Example: --notation crowfoot')
parser_erdgenerate.add_argument('-t', '--typ', help='Attributes with types are displayed in the ERD')
parser_erdgenerate.add_argument('-a', '--attr', action='store_true', help='The ERD displays Attributes')
parser_erdgenerate.add_argument('-c', '--color', action='store_true', help='The ERD is colored')
parser_erdgenerate.add_argument('-g', '--graphml', action='store_true', help='The Output-Type is a GraphML File')
parser_erdgenerate.add_argument('-p', '--pic', action='store_true', help='The Output-Type is a Pic-File')
parser_erdgenerate.add_argument('-d', '--draw', action='store_true', help='The Output-Type is a LibreOffice Draw File')
parser_erdgenerate.add_argument('-v', '--viz', action='store_true', help='The Output-Type is a Graphviz File')
parser_erdgenerate.add_argument('-l', '--loc', help='Define the output language')
parser_erdgenerate.add_argument('-s', '--show', action='store_true', help='Shows generated Diagramm in Programm')
parser_erdgenerate.add_argument('--auto', action='store_true', help='ERD generated with default options')

# create the parser for the "open" sub-command

parser_open = ermtk_subparsers.add_parser('open', help='Opens a XERML-File to use it in the Shell')
parser_open.add_argument('-i', '--inputfile', help='Inputfile')
parser_open.add_argument('-l', '--language', help='Laguagefile')
parser_open.add_argument('-t', '--type', help='Typefile')

# create the parser for the "close" sub-command

parser_close = ermtk_subparsers.add_parser('close', help='Closes a XERML-File if it is not needed anymore')
parser_close.add_argument('-t', '--type', action='store_true', help='Typefile')
parser_close.add_argument('-l', '--language', action='store_true', help='Languagefile')

# create the parser for the "exit" sub-command

parser_exit = ermtk_subparsers.add_parser('exit', help='Exit the shell')

parser_shell = ermtk_subparsers.add_parser('shell', help='Enters the shell')

# create the parser for the "bye" sub-command

parser_bye = ermtk_subparsers.add_parser('bye', help='Exit the shell')

# create the parser for the "list" sub-command

parser_list = ermtk_subparsers.add_parser('list', help='Generate an ERD from XERML Modell')
parser_list.add_argument('-all', action='store_true', help='List all Entity-Types and Relationship-Types')
parser_list.add_argument('-ent', action='store_true', help='List Entity-Types')
parser_list.add_argument('-rel', action='store_true', help='List Relationship-Types')
parser_list.add_argument('-attr', action='store_true', help='List Attributes')

# create the parser for the "focus" sub-command

parser_erdfocus = ermtk_subparsers.add_parser('erdfocus', help='Generate an ERD focusing on specified Entities')
parser_erdfocus.add_argument('-i', '--inputfile', help='Inputfile')
parser_erdfocus.add_argument('-o', '--output', help='Outputfile')
parser_erdfocus.add_argument('-f', '--filter', help='Takes a value to filter the ERD')
parser_erdfocus.add_argument('-r', '--relcounter', help='Takes a number to define how much you want to see.')
parser_erdfocus.add_argument('-n', '--notation', help='Takes a value to define the notation \n'
                                                      'Example: --notation crowfoot')
parser_erdfocus.add_argument('-t', '--typ', help='Attributes with types are displayed in the ERD')
parser_erdfocus.add_argument('-a', '--attr', action='store_true', help='Attributes are displayed in the ERD')
parser_erdfocus.add_argument('-c', '--color', action='store_true', help='The ERD is colored')
parser_erdfocus.add_argument('-g', '--graphml', action='store_true', help='The Output-Type is a GraphML File')
parser_erdfocus.add_argument('-p', '--pic', action='store_true', help='The Output-Type is a Pic-File')
parser_erdfocus.add_argument('-d', '--draw', action='store_true', help='The Output-Type is a LibreOffice Draw File')
parser_erdfocus.add_argument('-v', '--viz', action='store_true', help='The Output-Type is a Graphviz File')
parser_erdfocus.add_argument('-l', '--loc', help='Define the output language')
parser_erdfocus.add_argument('--auto', action='store_true', help='ERD generated with default options')

# create the parser for the "block" sub-command

parser_blockdiagram = ermtk_subparsers.add_parser('blockdiagram',
                                                  help='Generate an blockdiagram of the relational model')
parser_blockdiagram.add_argument('-i', '--inputfile', help='Inputfile')
parser_blockdiagram.add_argument('-l', '--language', help='Define the output language')
# parser_blockdiagram.add_argument('-c', '--color', help='The diagram is colored')

# create the parser for the "ddl" sub-command
parser_ddlgenerate = ermtk_subparsers.add_parser('ddlgenerate', help='Convert an XERML Modell into DDL-Commands')
parser_ddlgenerate.add_argument('-i', '--inputfile', help='Inputfile')
parser_ddlgenerate.add_argument('-o', "--output", help='Outputfile')
parser_ddlgenerate.add_argument("--amount", help='Amount of XML data (only availible for BaseX)')
parser_ddlgenerate.add_argument('databasetype',
                                help='Available Databasetype: basexml, basexschema, mysql, oracle, postgresql, rel, '
                                     'sqlserver, sqlite')
parser_ddlgenerate.add_argument('-t', "--typ", help='Typdescription')
parser_ddlgenerate.add_argument('-l', "--loc", help='Localisation')
parser_ddlgenerate.add_argument('--auto', action='store_true', help='Automatically run against database')
parser_ddlgenerate.add_argument('--alltables', action='store_true', help='All relation as tables')
parser_ddlgenerate.add_argument('--notnull', action='store_true', help='Deactivates the not null')
parser_ddlgenerate.add_argument('--format', action='store_true', help='Format for outputfile')
parser_ddlgenerate.add_argument('--constaft', action='store_true', help='Constraints after create Tables')
parser_ddlgenerate.add_argument('--consttabl', action='store_true', help='Constraints as Tableconstraints')
parser_ddlgenerate.add_argument('--keyword', action='store_true', help='Keywords as uppercase')

# create the parser for the "dml" sub-command
parser_dmlgenerate = ermtk_subparsers.add_parser('dmlgenerate', help='Generate example data in form of DML-Commands')
parser_dmlgenerate.add_argument('-i', "--inputfile", help='Inputfile')
parser_dmlgenerate.add_argument('-o', "--output", help='Outputfile')
parser_dmlgenerate.add_argument('--alltables', action='store_true', help='All relations as tables')
parser_dmlgenerate.add_argument('--auto', action='store_true', help='Automatically run against database')
parser_dmlgenerate.add_argument('database', help='Available Databases: baseX, mysql, '
                                                 'oracle, postgresql, rel, sqlserver')
parser_dmlgenerate.add_argument('-t', "--typ", help='Typdescription')
parser_dmlgenerate.add_argument('-l', "--loc", help='Localisation')
parser_dmlgenerate.add_argument('amount', help='Amount of Example Data')

parser_dmlform = ermtk_subparsers.add_parser('dmlform', help='Generate an entry form for typ in example data')
parser_dmlform.add_argument('-i', "--inputfile", help='Inputfile')
parser_dmlform.add_argument('-t', "--typ", help='Typdescription')
parser_dmlform.add_argument('-l', "--loc", help='Localisation')
parser_dmlform.add_argument('-o', "--output", help='Outputfile')
parser_dmlform.add_argument('database', help='Database')
parser_dmlform.add_argument("--alltables", action='store_true', help='All relations as tables')

# -------------------------- Config Parser ---------------------------------------
parser_configure = ermtk_subparsers.add_parser('config', help="Configure database connection attributes")
parser_configures = parser_configure.add_subparsers(title='config-commands', help='config-command help', dest='subparser')
parser_configure.add_argument('-s', '--save', action='store_true', help='Save current configuration')
# BaseX config
parser_basex = parser_configures.add_parser('basex', help="BaseX connection attributes")
parser_basex.add_argument('-a', '--address', help="Configure Address DEFAULT = Localhost")
parser_basex.add_argument('-por', '--port', help="Configure Port DEFAULT = 1984")
parser_basex.add_argument('-usr', '--user', help="Configure User DEFAULT = admin")
parser_basex.add_argument('-pwd', '--password', help="Configure Password DEFAULT = admin")
# Oracle config
parser_oracle = parser_configures.add_parser('oracle', help="Oracle connection attributes")
parser_oracle.add_argument('-a', '--address', help="Configure Address DEFAULT = 127.0.0.1")
parser_oracle.add_argument('-s', '--servicename', help="Configure ServiceName DEFAULT = XE")
parser_oracle.add_argument('-usr', '--user', help="Configure User DEFAULT = i13075")
parser_oracle.add_argument('-pwd', '--password', help="Configure Password DEFAULT = topsecret")
# Postgresql config
parser_postgre = parser_configures.add_parser('postgresql', help="PostgreSQL connection attributes")
parser_postgre.add_argument('-a', '--address', help="Configure Address DEFAULT = localhost")
parser_postgre.add_argument('-d', '--database', help="Configure Database DEFAULT = test")
parser_postgre.add_argument('-usr', '--user', help="Configure User DEFAULT = postgres")
parser_postgre.add_argument('-pwd', '--password', help="Configure Password DEFAULT = postgres")
# SQLite config
parser_sqlite = parser_configures.add_parser('sqlite', help="SQLite connection attributes")
parser_sqlite.add_argument('-d', '--directory', help="Configure Directory DEFAULT = "
                                                     "/home/christoph/GitCopy/Ermtk/SQLite_DB.db")
# SQLServer config
parser_sqlserver = parser_configures.add_parser('sqlserver', help="SQLServer connection attributes")
parser_sqlserver.add_argument('-dri', '--driver', help="Configure Driver DEFAULT = ODBC Driver 17 for SQL Server")
parser_sqlserver.add_argument('-ser', '--server', help="Configure Server DEFAULT = localhost")
parser_sqlserver.add_argument('-da', '--database', help="Configure Database DEFAULT = mydatabase")
parser_sqlserver.add_argument('-usr', '--userid', help="Configure UserID DEFAULT = sa")
parser_sqlserver.add_argument('-pwd', '--password', help="Configure Password DEFAULT = xX94Hugo")
# MYSQL config
parser_mysql = parser_configures.add_parser('mysql', help="MySQL connection attributes")
parser_mysql.add_argument('-a', '--address', help="Configure Address DEFAULT = Localhost")
parser_mysql.add_argument('-usr', '--user', help="Configure User DEFAULT = root")
parser_mysql.add_argument('-pwd', '--password', help="Configure Password DEFAULT = rootpasswordgiven")
parser_mysql.add_argument('-da', '--database', help="Configure Database DEFAULT = mydatabase")
# REL config
parser_rel = parser_configures.add_parser('rel', help="REL connection attributes")
#
